name: Dev Deployment

on:
  #To trigger manually
  workflow_dispatch:
  push:
    branches: [oci-development]

env:
  ENVIRONMENT: development

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OCI_CLI_USER: ${{ secrets.OCI_NON_PROD_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_NON_PROD_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_NON_PROD_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_NON_PROD_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_NON_PROD_CLI_REGION }}
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          ref: development
      - name: Setting up Java
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "oracle"
      # - name: Building commons
      #   working-directory: ./commons
      #   run: mvn clean install
      # - name: Building commons-jooq
      #   working-directory: ./commons-jooq
      #   run: mvn clean install
      # - name: Building commons-security
      #   working-directory: ./commons-security
      #   run: mvn clean install
      # - name: Building commons-mongo
      #   working-directory: ./commons-mongo
      #   run: mvn clean install
      # - name: Building commons-mq
      #   working-directory: ./commons-mq
      #   run: mvn clean install
      - name: Building config
        working-directory: ./config
        run: mvn clean install
      # - name: Building eureka
      #   working-directory: ./eureka
      #   run: mvn clean install
      # - name: Building gateway
      #   working-directory: ./gateway
      #   run: mvn clean install
      # - name: Building security
      #   working-directory: ./security
      #   run: mvn clean install
      # - name: Building ui
      #   working-directory: ./ui
      #   run: mvn clean install
      # - name: Building files
      #   working-directory: ./files
      #   run: mvn clean install
      # - name: Building core
      #   working-directory: ./core
      #   run: mvn clean install
      # - name: Building multi
      #   working-directory: ./multi
      #   run: mvn clean install
      - name: Artifact version
        id: artifactVersionStep
        run: |
          VERSION=$(date '+%Y%m%d%H%M%S')
          echo "Setting version to ${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
      - name: Uploading Artifacts to OCI
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        id: upload-artifacts
        with:
          command: "artifacts generic artifact upload-by-path --repository-id ocid1.artifactrepository.oc1.iad.0.amaaaaaay56thcyatixt7wsusao4pqxotk6wxtvqynuaeojd4w24y6rajbyq --artifact-path nclc/development/config.jar --artifact-version ${{ steps.artifactVersionStep.outputs.VERSION }} --content-body ./config/target/config.jar -v"
