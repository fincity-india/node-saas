/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.files.jooq.tables;


import com.fincity.saas.files.jooq.Files;
import com.fincity.saas.files.jooq.Keys;
import com.fincity.saas.files.jooq.enums.FilesAccessPathResourceType;
import com.fincity.saas.files.jooq.tables.records.FilesAccessPathRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FilesAccessPath extends TableImpl<FilesAccessPathRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>files.files_access_path</code>
     */
    public static final FilesAccessPath FILES_ACCESS_PATH = new FilesAccessPath();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilesAccessPathRecord> getRecordType() {
        return FilesAccessPathRecord.class;
    }

    /**
     * The column <code>files.files_access_path.ID</code>. Primary key
     */
    public final TableField<FilesAccessPathRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>files.files_access_path.CLIENT_CODE</code>. Client code
     */
    public final TableField<FilesAccessPathRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client code");

    /**
     * The column <code>files.files_access_path.USER_ID</code>. USER ID
     */
    public final TableField<FilesAccessPathRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED, this, "USER ID");

    /**
     * The column <code>files.files_access_path.RESOURCE_TYPE</code>. Static or
     * Secured resource
     */
    public final TableField<FilesAccessPathRecord, FilesAccessPathResourceType> RESOURCE_TYPE = createField(DSL.name("RESOURCE_TYPE"), SQLDataType.VARCHAR(7).defaultValue(DSL.inline("STATIC", SQLDataType.VARCHAR)).asEnumDataType(FilesAccessPathResourceType.class), this, "Static or Secured resource");

    /**
     * The column <code>files.files_access_path.ACCESS_NAME</code>. Role or
     * Permission Name
     */
    public final TableField<FilesAccessPathRecord, String> ACCESS_NAME = createField(DSL.name("ACCESS_NAME"), SQLDataType.VARCHAR(256), this, "Role or Permission Name");

    /**
     * The column <code>files.files_access_path.WRITE_ACCESS</code>. Write
     * access
     */
    public final TableField<FilesAccessPathRecord, Byte> WRITE_ACCESS = createField(DSL.name("WRITE_ACCESS"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Write access");

    /**
     * The column <code>files.files_access_path.PATH</code>. Path to the
     * resource
     */
    public final TableField<FilesAccessPathRecord, String> PATH = createField(DSL.name("PATH"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "Path to the resource");

    /**
     * The column <code>files.files_access_path.ALLOW_SUB_PATH_ACCESS</code>.
     * Allow sub paths with same access
     */
    public final TableField<FilesAccessPathRecord, Byte> ALLOW_SUB_PATH_ACCESS = createField(DSL.name("ALLOW_SUB_PATH_ACCESS"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Allow sub paths with same access");

    /**
     * The column <code>files.files_access_path.CREATED_BY</code>. ID of the
     * user who created this row
     */
    public final TableField<FilesAccessPathRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>files.files_access_path.CREATED_AT</code>. Time when
     * this row is created
     */
    public final TableField<FilesAccessPathRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>files.files_access_path.UPDATED_BY</code>. ID of the
     * user who updated this row
     */
    public final TableField<FilesAccessPathRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>files.files_access_path.UPDATED_AT</code>. Time when
     * this row is updated
     */
    public final TableField<FilesAccessPathRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private FilesAccessPath(Name alias, Table<FilesAccessPathRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FilesAccessPath(Name alias, Table<FilesAccessPathRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>files.files_access_path</code> table reference
     */
    public FilesAccessPath(String alias) {
        this(DSL.name(alias), FILES_ACCESS_PATH);
    }

    /**
     * Create an aliased <code>files.files_access_path</code> table reference
     */
    public FilesAccessPath(Name alias) {
        this(alias, FILES_ACCESS_PATH);
    }

    /**
     * Create a <code>files.files_access_path</code> table reference
     */
    public FilesAccessPath() {
        this(DSL.name("files_access_path"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Files.FILES;
    }

    @Override
    public Identity<FilesAccessPathRecord, ULong> getIdentity() {
        return (Identity<FilesAccessPathRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<FilesAccessPathRecord> getPrimaryKey() {
        return Keys.KEY_FILES_ACCESS_PATH_PRIMARY;
    }

    @Override
    public FilesAccessPath as(String alias) {
        return new FilesAccessPath(DSL.name(alias), this);
    }

    @Override
    public FilesAccessPath as(Name alias) {
        return new FilesAccessPath(alias, this);
    }

    @Override
    public FilesAccessPath as(Table<?> alias) {
        return new FilesAccessPath(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FilesAccessPath rename(String name) {
        return new FilesAccessPath(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilesAccessPath rename(Name name) {
        return new FilesAccessPath(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilesAccessPath rename(Table<?> name) {
        return new FilesAccessPath(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesAccessPath where(Condition condition) {
        return new FilesAccessPath(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesAccessPath where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesAccessPath where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesAccessPath where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilesAccessPath where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilesAccessPath where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilesAccessPath where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilesAccessPath where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesAccessPath whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilesAccessPath whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
