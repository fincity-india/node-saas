/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import com.fincity.security.jooq.tables.SecurityOrgStructure;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityOrgStructureRecord extends UpdatableRecordImpl<SecurityOrgStructureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_org_structure.ID</code>. Primary key
     */
    public SecurityOrgStructureRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_org_structure.ID</code>. Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>security.security_org_structure.CLIENT_ID</code>. Client
     * ID
     */
    public SecurityOrgStructureRecord setClientId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>security.security_org_structure.CLIENT_ID</code>. Client
     * ID
     */
    public ULong getClientId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>security.security_org_structure.USER_ID</code>. User ID
     */
    public SecurityOrgStructureRecord setUserId(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>security.security_org_structure.USER_ID</code>. User ID
     */
    public ULong getUserId() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>security.security_org_structure.DEFAULT_MANAGER</code>.
     * Default manager, 0 if he is reporting to multiple managers
     */
    public SecurityOrgStructureRecord setDefaultManager(Byte value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>security.security_org_structure.DEFAULT_MANAGER</code>.
     * Default manager, 0 if he is reporting to multiple managers
     */
    public Byte getDefaultManager() {
        return (Byte) get(3);
    }

    /**
     * Setter for <code>security.security_org_structure.MANAGER_ID</code>.
     * Manager ID
     */
    public SecurityOrgStructureRecord setManagerId(ULong value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>security.security_org_structure.MANAGER_ID</code>.
     * Manager ID
     */
    public ULong getManagerId() {
        return (ULong) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecurityOrgStructureRecord
     */
    public SecurityOrgStructureRecord() {
        super(SecurityOrgStructure.SECURITY_ORG_STRUCTURE);
    }

    /**
     * Create a detached, initialised SecurityOrgStructureRecord
     */
    public SecurityOrgStructureRecord(ULong id, ULong clientId, ULong userId, Byte defaultManager, ULong managerId) {
        super(SecurityOrgStructure.SECURITY_ORG_STRUCTURE);

        setId(id);
        setClientId(clientId);
        setUserId(userId);
        setDefaultManager(defaultManager);
        setManagerId(managerId);
        resetChangedOnNotNull();
    }
}
