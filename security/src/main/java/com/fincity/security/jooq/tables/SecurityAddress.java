/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.SecurityClientAddress.SecurityClientAddressPath;
import com.fincity.security.jooq.tables.SecurityUserAddress.SecurityUserAddressPath;
import com.fincity.security.jooq.tables.records.SecurityAddressRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityAddress extends TableImpl<SecurityAddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_address</code>
     */
    public static final SecurityAddress SECURITY_ADDRESS = new SecurityAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityAddressRecord> getRecordType() {
        return SecurityAddressRecord.class;
    }

    /**
     * The column <code>security.security_address.ID</code>. Primary key
     */
    public final TableField<SecurityAddressRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_address.ADDRESS_TYPE</code>. Address
     * type
     */
    public final TableField<SecurityAddressRecord, String> ADDRESS_TYPE = createField(DSL.name("ADDRESS_TYPE"), SQLDataType.VARCHAR(128), this, "Address type");

    /**
     * The column <code>security.security_address.ADDRESS_COMMENT</code>.
     * Address comment
     */
    public final TableField<SecurityAddressRecord, String> ADDRESS_COMMENT = createField(DSL.name("ADDRESS_COMMENT"), SQLDataType.VARCHAR(512), this, "Address comment");

    /**
     * The column <code>security.security_address.ADDRESS_LINE1</code>. Address
     * line 1
     */
    public final TableField<SecurityAddressRecord, String> ADDRESS_LINE1 = createField(DSL.name("ADDRESS_LINE1"), SQLDataType.VARCHAR(512), this, "Address line 1");

    /**
     * The column <code>security.security_address.ADDRESS_LINE2</code>. Address
     * line 2
     */
    public final TableField<SecurityAddressRecord, String> ADDRESS_LINE2 = createField(DSL.name("ADDRESS_LINE2"), SQLDataType.VARCHAR(512), this, "Address line 2");

    /**
     * The column <code>security.security_address.ADDRESS_LINE3</code>. Address
     * line 3
     */
    public final TableField<SecurityAddressRecord, String> ADDRESS_LINE3 = createField(DSL.name("ADDRESS_LINE3"), SQLDataType.VARCHAR(512), this, "Address line 3");

    /**
     * The column <code>security.security_address.CITY</code>. City
     */
    public final TableField<SecurityAddressRecord, String> CITY = createField(DSL.name("CITY"), SQLDataType.VARCHAR(256), this, "City");

    /**
     * The column <code>security.security_address.STATE</code>. State
     */
    public final TableField<SecurityAddressRecord, String> STATE = createField(DSL.name("STATE"), SQLDataType.VARCHAR(256), this, "State");

    /**
     * The column <code>security.security_address.COUNTRY</code>. Country
     */
    public final TableField<SecurityAddressRecord, String> COUNTRY = createField(DSL.name("COUNTRY"), SQLDataType.VARCHAR(256), this, "Country");

    /**
     * The column <code>security.security_address.PIN</code>. Pin code
     */
    public final TableField<SecurityAddressRecord, String> PIN = createField(DSL.name("PIN"), SQLDataType.VARCHAR(32), this, "Pin code");

    /**
     * The column <code>security.security_address.PHONE</code>. Phone number
     */
    public final TableField<SecurityAddressRecord, String> PHONE = createField(DSL.name("PHONE"), SQLDataType.VARCHAR(32), this, "Phone number");

    /**
     * The column <code>security.security_address.LANDMARK</code>. Landmark
     */
    public final TableField<SecurityAddressRecord, String> LANDMARK = createField(DSL.name("LANDMARK"), SQLDataType.VARCHAR(512), this, "Landmark");

    /**
     * The column <code>security.security_address.LATITUDE</code>. Latitude
     */
    public final TableField<SecurityAddressRecord, BigDecimal> LATITUDE = createField(DSL.name("LATITUDE"), SQLDataType.DECIMAL(10, 8), this, "Latitude");

    /**
     * The column <code>security.security_address.LONGITUDE</code>. Longitude
     */
    public final TableField<SecurityAddressRecord, BigDecimal> LONGITUDE = createField(DSL.name("LONGITUDE"), SQLDataType.DECIMAL(11, 8), this, "Longitude");

    /**
     * The column <code>security.security_address.MAP_LOCATION</code>. Map
     * location
     */
    public final TableField<SecurityAddressRecord, String> MAP_LOCATION = createField(DSL.name("MAP_LOCATION"), SQLDataType.CLOB, this, "Map location");

    /**
     * The column <code>security.security_address.CREATED_BY</code>. ID of the
     * user who created this row
     */
    public final TableField<SecurityAddressRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_address.CREATED_AT</code>. Time when
     * this row is created
     */
    public final TableField<SecurityAddressRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_address.UPDATED_BY</code>. ID of the
     * user who last updated this row
     */
    public final TableField<SecurityAddressRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who last updated this row");

    /**
     * The column <code>security.security_address.UPDATED_AT</code>. Time when
     * this row is last updated
     */
    public final TableField<SecurityAddressRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is last updated");

    private SecurityAddress(Name alias, Table<SecurityAddressRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityAddress(Name alias, Table<SecurityAddressRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_address</code> table reference
     */
    public SecurityAddress(String alias) {
        this(DSL.name(alias), SECURITY_ADDRESS);
    }

    /**
     * Create an aliased <code>security.security_address</code> table reference
     */
    public SecurityAddress(Name alias) {
        this(alias, SECURITY_ADDRESS);
    }

    /**
     * Create a <code>security.security_address</code> table reference
     */
    public SecurityAddress() {
        this(DSL.name("security_address"), null);
    }

    public <O extends Record> SecurityAddress(Table<O> path, ForeignKey<O, SecurityAddressRecord> childPath, InverseForeignKey<O, SecurityAddressRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_ADDRESS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityAddressPath extends SecurityAddress implements Path<SecurityAddressRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityAddressPath(Table<O> path, ForeignKey<O, SecurityAddressRecord> childPath, InverseForeignKey<O, SecurityAddressRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityAddressPath(Name alias, Table<SecurityAddressRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityAddressPath as(String alias) {
            return new SecurityAddressPath(DSL.name(alias), this);
        }

        @Override
        public SecurityAddressPath as(Name alias) {
            return new SecurityAddressPath(alias, this);
        }

        @Override
        public SecurityAddressPath as(Table<?> alias) {
            return new SecurityAddressPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityAddressRecord, ULong> getIdentity() {
        return (Identity<SecurityAddressRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityAddressRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_ADDRESS_PRIMARY;
    }

    private transient SecurityClientAddressPath _securityClientAddress;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_client_address</code> table
     */
    public SecurityClientAddressPath securityClientAddress() {
        if (_securityClientAddress == null)
            _securityClientAddress = new SecurityClientAddressPath(this, null, Keys.FK2_CLIENT_ADDRESS_ADDRESS_ID.getInverseKey());

        return _securityClientAddress;
    }

    private transient SecurityUserAddressPath _securityUserAddress;

    /**
     * Get the implicit to-many join path to the
     * <code>security.security_user_address</code> table
     */
    public SecurityUserAddressPath securityUserAddress() {
        if (_securityUserAddress == null)
            _securityUserAddress = new SecurityUserAddressPath(this, null, Keys.FK2_USER_ADDRESS_ADDRESS_ID.getInverseKey());

        return _securityUserAddress;
    }

    @Override
    public SecurityAddress as(String alias) {
        return new SecurityAddress(DSL.name(alias), this);
    }

    @Override
    public SecurityAddress as(Name alias) {
        return new SecurityAddress(alias, this);
    }

    @Override
    public SecurityAddress as(Table<?> alias) {
        return new SecurityAddress(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAddress rename(String name) {
        return new SecurityAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAddress rename(Name name) {
        return new SecurityAddress(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAddress rename(Table<?> name) {
        return new SecurityAddress(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAddress where(Condition condition) {
        return new SecurityAddress(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAddress where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAddress where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAddress where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAddress where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAddress where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAddress where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityAddress where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAddress whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityAddress whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
