/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import com.fincity.security.jooq.enums.SecurityOtpTargetType;
import com.fincity.security.jooq.tables.SecurityOtp;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityOtpRecord extends UpdatableRecordImpl<SecurityOtpRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_otp.ID</code>. Primary key, unique
     * identifier for each OTP entry
     */
    public SecurityOtpRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_otp.ID</code>. Primary key, unique
     * identifier for each OTP entry
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>security.security_otp.APP_ID</code>. Identifier for the
     * application to which this OTP belongs. References security_app table
     */
    public SecurityOtpRecord setAppId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>security.security_otp.APP_ID</code>. Identifier for the
     * application to which this OTP belongs. References security_app table
     */
    public ULong getAppId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>security.security_otp.USER_ID</code>. Identifier for the
     * user for whom this OTP is generated. References security_user table
     */
    public SecurityOtpRecord setUserId(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>security.security_otp.USER_ID</code>. Identifier for the
     * user for whom this OTP is generated. References security_user table
     */
    public ULong getUserId() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>security.security_otp.PURPOSE</code>. Purpose or reason
     * for the OTP (e.g., authentication, password reset, etc.)
     */
    public SecurityOtpRecord setPurpose(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>security.security_otp.PURPOSE</code>. Purpose or reason
     * for the OTP (e.g., authentication, password reset, etc.)
     */
    public String getPurpose() {
        return (String) get(3);
    }

    /**
     * Setter for <code>security.security_otp.TARGET_TYPE</code>. The target
     * medium for the OTP delivery: EMAIL, PHONE, or BOTH
     */
    public SecurityOtpRecord setTargetType(SecurityOtpTargetType value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>security.security_otp.TARGET_TYPE</code>. The target
     * medium for the OTP delivery: EMAIL, PHONE, or BOTH
     */
    public SecurityOtpTargetType getTargetType() {
        return (SecurityOtpTargetType) get(4);
    }

    /**
     * Setter for <code>security.security_otp.UNIQUE_CODE</code>. The hashed OTP
     * code used for verification
     */
    public SecurityOtpRecord setUniqueCode(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>security.security_otp.UNIQUE_CODE</code>. The hashed OTP
     * code used for verification
     */
    public String getUniqueCode() {
        return (String) get(5);
    }

    /**
     * Setter for <code>security.security_otp.EXPIRES_AT</code>. Timestamp
     * indicating when the OTP expires and becomes invalid
     */
    public SecurityOtpRecord setExpiresAt(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>security.security_otp.EXPIRES_AT</code>. Timestamp
     * indicating when the OTP expires and becomes invalid
     */
    public LocalDateTime getExpiresAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>security.security_otp.IP_ADDRESS</code>. IP address of
     * the user to track OTP generation or use, supports both IPv4 and IPv6
     */
    public SecurityOtpRecord setIpAddress(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>security.security_otp.IP_ADDRESS</code>. IP address of
     * the user to track OTP generation or use, supports both IPv4 and IPv6
     */
    public String getIpAddress() {
        return (String) get(7);
    }

    /**
     * Setter for <code>security.security_otp.CREATED_BY</code>.
     */
    public SecurityOtpRecord setCreatedBy(ULong value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>security.security_otp.CREATED_BY</code>.
     */
    public ULong getCreatedBy() {
        return (ULong) get(8);
    }

    /**
     * Setter for <code>security.security_otp.CREATED_AT</code>.
     */
    public SecurityOtpRecord setCreatedAt(LocalDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>security.security_otp.CREATED_AT</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecurityOtpRecord
     */
    public SecurityOtpRecord() {
        super(SecurityOtp.SECURITY_OTP);
    }

    /**
     * Create a detached, initialised SecurityOtpRecord
     */
    public SecurityOtpRecord(ULong id, ULong appId, ULong userId, String purpose, SecurityOtpTargetType targetType, String uniqueCode, LocalDateTime expiresAt, String ipAddress, ULong createdBy, LocalDateTime createdAt) {
        super(SecurityOtp.SECURITY_OTP);

        setId(id);
        setAppId(appId);
        setUserId(userId);
        setPurpose(purpose);
        setTargetType(targetType);
        setUniqueCode(uniqueCode);
        setExpiresAt(expiresAt);
        setIpAddress(ipAddress);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        resetChangedOnNotNull();
    }
}
