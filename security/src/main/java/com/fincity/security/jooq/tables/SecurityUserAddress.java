/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.SecurityAddress.SecurityAddressPath;
import com.fincity.security.jooq.tables.SecurityUser.SecurityUserPath;
import com.fincity.security.jooq.tables.records.SecurityUserAddressRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityUserAddress extends TableImpl<SecurityUserAddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_user_address</code>
     */
    public static final SecurityUserAddress SECURITY_USER_ADDRESS = new SecurityUserAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityUserAddressRecord> getRecordType() {
        return SecurityUserAddressRecord.class;
    }

    /**
     * The column <code>security.security_user_address.ID</code>. Primary key
     */
    public final TableField<SecurityUserAddressRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_user_address.USER_ID</code>. User ID
     */
    public final TableField<SecurityUserAddressRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User ID");

    /**
     * The column <code>security.security_user_address.ADDRESS_ID</code>.
     * Address ID
     */
    public final TableField<SecurityUserAddressRecord, ULong> ADDRESS_ID = createField(DSL.name("ADDRESS_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Address ID");

    private SecurityUserAddress(Name alias, Table<SecurityUserAddressRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityUserAddress(Name alias, Table<SecurityUserAddressRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_user_address</code> table
     * reference
     */
    public SecurityUserAddress(String alias) {
        this(DSL.name(alias), SECURITY_USER_ADDRESS);
    }

    /**
     * Create an aliased <code>security.security_user_address</code> table
     * reference
     */
    public SecurityUserAddress(Name alias) {
        this(alias, SECURITY_USER_ADDRESS);
    }

    /**
     * Create a <code>security.security_user_address</code> table reference
     */
    public SecurityUserAddress() {
        this(DSL.name("security_user_address"), null);
    }

    public <O extends Record> SecurityUserAddress(Table<O> path, ForeignKey<O, SecurityUserAddressRecord> childPath, InverseForeignKey<O, SecurityUserAddressRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_USER_ADDRESS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityUserAddressPath extends SecurityUserAddress implements Path<SecurityUserAddressRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityUserAddressPath(Table<O> path, ForeignKey<O, SecurityUserAddressRecord> childPath, InverseForeignKey<O, SecurityUserAddressRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityUserAddressPath(Name alias, Table<SecurityUserAddressRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityUserAddressPath as(String alias) {
            return new SecurityUserAddressPath(DSL.name(alias), this);
        }

        @Override
        public SecurityUserAddressPath as(Name alias) {
            return new SecurityUserAddressPath(alias, this);
        }

        @Override
        public SecurityUserAddressPath as(Table<?> alias) {
            return new SecurityUserAddressPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityUserAddressRecord, ULong> getIdentity() {
        return (Identity<SecurityUserAddressRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityUserAddressRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_USER_ADDRESS_PRIMARY;
    }

    @Override
    public List<ForeignKey<SecurityUserAddressRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_USER_ADDRESS_USER_ID, Keys.FK2_USER_ADDRESS_ADDRESS_ID);
    }

    private transient SecurityUserPath _securityUser;

    /**
     * Get the implicit join path to the <code>security.security_user</code>
     * table.
     */
    public SecurityUserPath securityUser() {
        if (_securityUser == null)
            _securityUser = new SecurityUserPath(this, Keys.FK1_USER_ADDRESS_USER_ID, null);

        return _securityUser;
    }

    private transient SecurityAddressPath _securityAddress;

    /**
     * Get the implicit join path to the <code>security.security_address</code>
     * table.
     */
    public SecurityAddressPath securityAddress() {
        if (_securityAddress == null)
            _securityAddress = new SecurityAddressPath(this, Keys.FK2_USER_ADDRESS_ADDRESS_ID, null);

        return _securityAddress;
    }

    @Override
    public SecurityUserAddress as(String alias) {
        return new SecurityUserAddress(DSL.name(alias), this);
    }

    @Override
    public SecurityUserAddress as(Name alias) {
        return new SecurityUserAddress(alias, this);
    }

    @Override
    public SecurityUserAddress as(Table<?> alias) {
        return new SecurityUserAddress(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUserAddress rename(String name) {
        return new SecurityUserAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUserAddress rename(Name name) {
        return new SecurityUserAddress(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUserAddress rename(Table<?> name) {
        return new SecurityUserAddress(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserAddress where(Condition condition) {
        return new SecurityUserAddress(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserAddress where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserAddress where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserAddress where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUserAddress where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUserAddress where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUserAddress where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityUserAddress where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserAddress whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityUserAddress whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
