/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Indexes;
import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.enums.SecuritySoxLogActionName;
import com.fincity.security.jooq.enums.SecuritySoxLogObjectName;
import com.fincity.security.jooq.tables.records.SecuritySoxLogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecuritySoxLog extends TableImpl<SecuritySoxLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_sox_log</code>
     */
    public static final SecuritySoxLog SECURITY_SOX_LOG = new SecuritySoxLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecuritySoxLogRecord> getRecordType() {
        return SecuritySoxLogRecord.class;
    }

    /**
     * The column <code>security.security_sox_log.ID</code>. Primary key
     */
    public final TableField<SecuritySoxLogRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_sox_log.OBJECT_ID</code>. ID of the
     * object where the change is happening
     */
    public final TableField<SecuritySoxLogRecord, ULong> OBJECT_ID = createField(DSL.name("OBJECT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "ID of the object where the change is happening");

    /**
     * The column <code>security.security_sox_log.OBJECT_NAME</code>. Operation
     * on the object
     */
    public final TableField<SecuritySoxLogRecord, SecuritySoxLogObjectName> OBJECT_NAME = createField(DSL.name("OBJECT_NAME"), SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(SecuritySoxLogObjectName.class), this, "Operation on the object");

    /**
     * The column <code>security.security_sox_log.ACTION_NAME</code>. Log action
     * name
     */
    public final TableField<SecuritySoxLogRecord, SecuritySoxLogActionName> ACTION_NAME = createField(DSL.name("ACTION_NAME"), SQLDataType.VARCHAR(8).nullable(false).asEnumDataType(SecuritySoxLogActionName.class), this, "Log action name");

    /**
     * The column <code>security.security_sox_log.DESCRIPTION</code>. Log
     * description
     */
    public final TableField<SecuritySoxLogRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(1048).nullable(false), this, "Log description");

    /**
     * The column <code>security.security_sox_log.CREATED_BY</code>. ID of the
     * user who created this row
     */
    public final TableField<SecuritySoxLogRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_sox_log.CREATED_AT</code>. Time when
     * this row is created
     */
    public final TableField<SecuritySoxLogRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    private SecuritySoxLog(Name alias, Table<SecuritySoxLogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecuritySoxLog(Name alias, Table<SecuritySoxLogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_sox_log</code> table reference
     */
    public SecuritySoxLog(String alias) {
        this(DSL.name(alias), SECURITY_SOX_LOG);
    }

    /**
     * Create an aliased <code>security.security_sox_log</code> table reference
     */
    public SecuritySoxLog(Name alias) {
        this(alias, SECURITY_SOX_LOG);
    }

    /**
     * Create a <code>security.security_sox_log</code> table reference
     */
    public SecuritySoxLog() {
        this(DSL.name("security_sox_log"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SECURITY_SOX_LOG_CREATED_AT, Indexes.SECURITY_SOX_LOG_OBJECT_NAME);
    }

    @Override
    public Identity<SecuritySoxLogRecord, ULong> getIdentity() {
        return (Identity<SecuritySoxLogRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecuritySoxLogRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_SOX_LOG_PRIMARY;
    }

    @Override
    public SecuritySoxLog as(String alias) {
        return new SecuritySoxLog(DSL.name(alias), this);
    }

    @Override
    public SecuritySoxLog as(Name alias) {
        return new SecuritySoxLog(alias, this);
    }

    @Override
    public SecuritySoxLog as(Table<?> alias) {
        return new SecuritySoxLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecuritySoxLog rename(String name) {
        return new SecuritySoxLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecuritySoxLog rename(Name name) {
        return new SecuritySoxLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecuritySoxLog rename(Table<?> name) {
        return new SecuritySoxLog(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecuritySoxLog where(Condition condition) {
        return new SecuritySoxLog(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecuritySoxLog where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecuritySoxLog where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecuritySoxLog where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecuritySoxLog where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecuritySoxLog where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecuritySoxLog where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecuritySoxLog where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecuritySoxLog whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecuritySoxLog whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
