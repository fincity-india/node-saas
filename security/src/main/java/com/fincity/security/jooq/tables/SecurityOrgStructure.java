/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.SecurityClient.SecurityClientPath;
import com.fincity.security.jooq.tables.SecurityUser.SecurityUserPath;
import com.fincity.security.jooq.tables.records.SecurityOrgStructureRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SecurityOrgStructure extends TableImpl<SecurityOrgStructureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_org_structure</code>
     */
    public static final SecurityOrgStructure SECURITY_ORG_STRUCTURE = new SecurityOrgStructure();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityOrgStructureRecord> getRecordType() {
        return SecurityOrgStructureRecord.class;
    }

    /**
     * The column <code>security.security_org_structure.ID</code>. Primary key
     */
    public final TableField<SecurityOrgStructureRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_org_structure.CLIENT_ID</code>. Client
     * ID
     */
    public final TableField<SecurityOrgStructureRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID");

    /**
     * The column <code>security.security_org_structure.USER_ID</code>. User ID
     */
    public final TableField<SecurityOrgStructureRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User ID");

    /**
     * The column <code>security.security_org_structure.DEFAULT_MANAGER</code>.
     * Default manager, 0 if he is reporting to multiple managers
     */
    public final TableField<SecurityOrgStructureRecord, Byte> DEFAULT_MANAGER = createField(DSL.name("DEFAULT_MANAGER"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Default manager, 0 if he is reporting to multiple managers");

    /**
     * The column <code>security.security_org_structure.MANAGER_ID</code>.
     * Manager ID
     */
    public final TableField<SecurityOrgStructureRecord, ULong> MANAGER_ID = createField(DSL.name("MANAGER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Manager ID");

    private SecurityOrgStructure(Name alias, Table<SecurityOrgStructureRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SecurityOrgStructure(Name alias, Table<SecurityOrgStructureRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>security.security_org_structure</code> table
     * reference
     */
    public SecurityOrgStructure(String alias) {
        this(DSL.name(alias), SECURITY_ORG_STRUCTURE);
    }

    /**
     * Create an aliased <code>security.security_org_structure</code> table
     * reference
     */
    public SecurityOrgStructure(Name alias) {
        this(alias, SECURITY_ORG_STRUCTURE);
    }

    /**
     * Create a <code>security.security_org_structure</code> table reference
     */
    public SecurityOrgStructure() {
        this(DSL.name("security_org_structure"), null);
    }

    public <O extends Record> SecurityOrgStructure(Table<O> path, ForeignKey<O, SecurityOrgStructureRecord> childPath, InverseForeignKey<O, SecurityOrgStructureRecord> parentPath) {
        super(path, childPath, parentPath, SECURITY_ORG_STRUCTURE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SecurityOrgStructurePath extends SecurityOrgStructure implements Path<SecurityOrgStructureRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SecurityOrgStructurePath(Table<O> path, ForeignKey<O, SecurityOrgStructureRecord> childPath, InverseForeignKey<O, SecurityOrgStructureRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SecurityOrgStructurePath(Name alias, Table<SecurityOrgStructureRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SecurityOrgStructurePath as(String alias) {
            return new SecurityOrgStructurePath(DSL.name(alias), this);
        }

        @Override
        public SecurityOrgStructurePath as(Name alias) {
            return new SecurityOrgStructurePath(alias, this);
        }

        @Override
        public SecurityOrgStructurePath as(Table<?> alias) {
            return new SecurityOrgStructurePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityOrgStructureRecord, ULong> getIdentity() {
        return (Identity<SecurityOrgStructureRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityOrgStructureRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_ORG_STRUCTURE_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityOrgStructureRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_ORG_STRUCTURE_UK1_ORG_STRUCTURE);
    }

    @Override
    public List<ForeignKey<SecurityOrgStructureRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_ORG_STRUCTURE_CLIENT_ID, Keys.FK2_ORG_STRUCTURE_USER_ID, Keys.FK3_ORG_STRUCTURE_MANAGER_ID);
    }

    private transient SecurityClientPath _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClientPath securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClientPath(this, Keys.FK1_ORG_STRUCTURE_CLIENT_ID, null);

        return _securityClient;
    }

    private transient SecurityUserPath _fk2OrgStructureUserId;

    /**
     * Get the implicit join path to the <code>security.security_user</code>
     * table, via the <code>FK2_ORG_STRUCTURE_USER_ID</code> key.
     */
    public SecurityUserPath fk2OrgStructureUserId() {
        if (_fk2OrgStructureUserId == null)
            _fk2OrgStructureUserId = new SecurityUserPath(this, Keys.FK2_ORG_STRUCTURE_USER_ID, null);

        return _fk2OrgStructureUserId;
    }

    private transient SecurityUserPath _fk3OrgStructureManagerId;

    /**
     * Get the implicit join path to the <code>security.security_user</code>
     * table, via the <code>FK3_ORG_STRUCTURE_MANAGER_ID</code> key.
     */
    public SecurityUserPath fk3OrgStructureManagerId() {
        if (_fk3OrgStructureManagerId == null)
            _fk3OrgStructureManagerId = new SecurityUserPath(this, Keys.FK3_ORG_STRUCTURE_MANAGER_ID, null);

        return _fk3OrgStructureManagerId;
    }

    @Override
    public SecurityOrgStructure as(String alias) {
        return new SecurityOrgStructure(DSL.name(alias), this);
    }

    @Override
    public SecurityOrgStructure as(Name alias) {
        return new SecurityOrgStructure(alias, this);
    }

    @Override
    public SecurityOrgStructure as(Table<?> alias) {
        return new SecurityOrgStructure(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityOrgStructure rename(String name) {
        return new SecurityOrgStructure(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityOrgStructure rename(Name name) {
        return new SecurityOrgStructure(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityOrgStructure rename(Table<?> name) {
        return new SecurityOrgStructure(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityOrgStructure where(Condition condition) {
        return new SecurityOrgStructure(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityOrgStructure where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityOrgStructure where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityOrgStructure where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityOrgStructure where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityOrgStructure where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityOrgStructure where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SecurityOrgStructure where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityOrgStructure whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SecurityOrgStructure whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
